"""
Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
"""
import os
import sys
import subprocess
import json
from pathlib import Path
from typing import Dict, List, Optional
import argparse

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Í≤ΩÎ°ú
PROJECT_ROOT = Path(__file__).parent.parent


class DeploymentManager:
    """Î∞∞Ìè¨ Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, environment: str = "production"):
        self.environment = environment
        self.project_root = PROJECT_ROOT
        self.project_id = "ai-diary-backend"  # Google Cloud Project ID
        self.service_name = "ai-diary-api"
        
    def run_command(self, command: str, check: bool = True) -> subprocess.CompletedProcess:
        """Î™ÖÎ†πÏñ¥ Ïã§Ìñâ"""
        print(f"üîß Ïã§Ìñâ Ï§ë: {command}")
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        
        if check and result.returncode != 0:
            print(f"‚ùå Î™ÖÎ†πÏñ¥ Ïã§Ìñâ Ïã§Ìå®: {command}")
            print(f"Error: {result.stderr}")
            sys.exit(1)
        
        return result
    
    def check_prerequisites(self) -> bool:
        """Î∞∞Ìè¨ Ï†Ñ ÌïÑÏàò Ï°∞Í±¥ ÌôïÏù∏"""
        print("üìã Î∞∞Ìè¨ Ï†Ñ ÌïÑÏàò Ï°∞Í±¥ ÌôïÏù∏ Ï§ë...")
        
        # Docker ÏÑ§Ïπò ÌôïÏù∏
        try:
            self.run_command("docker --version")
            print("  ‚úÖ Docker ÏÑ§Ïπò ÌôïÏù∏Îê®")
        except:
            print("  ‚ùå DockerÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
            return False
        
        # Google Cloud CLI ÌôïÏù∏ (Cloud Run Î∞∞Ìè¨ Ïãú)
        if self.environment == "production":
            try:
                self.run_command("gcloud --version")
                print("  ‚úÖ Google Cloud CLI ÏÑ§Ïπò ÌôïÏù∏Îê®")
            except:
                print("  ‚ùå Google Cloud CLIÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
                return False
        
        # ÌôòÍ≤Ω Î≥ÄÏàò ÌååÏùº ÌôïÏù∏
        env_file = self.project_root / f".env.{self.environment}"
        if not env_file.exists():
            print(f"  ‚ùå ÌôòÍ≤Ω Î≥ÄÏàò ÌååÏùº ÏóÜÏùå: {env_file}")
            return False
        
        print("  ‚úÖ .env ÌååÏùº ÌôïÏù∏Îê®")
        
        # ÌïÑÏàò ÌååÏùºÎì§ ÌôïÏù∏
        required_files = ["Dockerfile", "requirements.txt", "app/main.py"]
        for file_path in required_files:
            if not (self.project_root / file_path).exists():
                print(f"  ‚ùå ÌïÑÏàò ÌååÏùº ÏóÜÏùå: {file_path}")
                return False
        
        print("  ‚úÖ ÌïÑÏàò ÌååÏùºÎì§ ÌôïÏù∏Îê®")
        
        return True
    
    def run_tests(self) -> bool:
        """ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        print("üß™ ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë...")
        
        try:
            # ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
            self.run_command("pip install -r requirements.txt")
            
            # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
            result = self.run_command("python -m pytest app/tests/ -v", check=False)
            
            if result.returncode == 0:
                print("‚úÖ Î™®Îì† ÌÖåÏä§Ìä∏ ÌÜµÍ≥º")
                return True
            else:
                print("‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®")
                print(result.stdout)
                print(result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò: {e}")
            return False
    
    def build_docker_image(self) -> bool:
        """Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú"""
        print("üê≥ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë...")
        
        image_tag = f"{self.service_name}:{self.environment}"
        
        try:
            # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
            self.run_command(f"docker build -t {image_tag} .")
            print(f"‚úÖ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å: {image_tag}")
            
            # Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ ÌôïÏù∏
            result = self.run_command(f"docker images {image_tag} --format 'table {{.Size}}'")
            print(f"üì¶ Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞: {result.stdout.strip()}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ïã§Ìå®: {e}")
            return False
    
    def deploy_to_local(self) -> bool:
        """Î°úÏª¨ Î∞∞Ìè¨ (Docker Compose)"""
        print("üè† Î°úÏª¨ ÌôòÍ≤ΩÏóê Î∞∞Ìè¨ Ï§ë...")
        
        try:
            # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ
            self.run_command("docker-compose down", check=False)
            
            # ÏÉàÎ°úÏö¥ Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë
            self.run_command("docker-compose up -d --build")
            
            print("‚úÖ Î°úÏª¨ Î∞∞Ìè¨ ÏôÑÎ£å")
            print("üåê ÏÑúÎπÑÏä§ URL: http://localhost:8000")
            print("üìö API Î¨∏ÏÑú: http://localhost:8000/docs")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Î°úÏª¨ Î∞∞Ìè¨ Ïã§Ìå®: {e}")
            return False
    
    def deploy_to_cloud_run(self) -> bool:
        """Google Cloud RunÏóê Î∞∞Ìè¨"""
        print("‚òÅÔ∏è Google Cloud RunÏóê Î∞∞Ìè¨ Ï§ë...")
        
        try:
            # Google Cloud ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ï
            self.run_command(f"gcloud config set project {self.project_id}")
            
            # Container RegistryÏóê Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏
            registry_url = f"gcr.io/{self.project_id}/{self.service_name}"
            self.run_command(f"docker tag {self.service_name}:{self.environment} {registry_url}")
            
            # Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
            self.run_command(f"docker push {registry_url}")
            
            # Cloud Run ÏÑúÎπÑÏä§ Î∞∞Ìè¨
            deploy_command = f"""
            gcloud run deploy {self.service_name} \
                --image {registry_url} \
                --platform managed \
                --region asia-northeast1 \
                --allow-unauthenticated \
                --memory 2Gi \
                --cpu 2 \
                --max-instances 10 \
                --set-env-vars ENVIRONMENT={self.environment}
            """
            
            self.run_command(deploy_command)
            
            # ÏÑúÎπÑÏä§ URL ÌôïÏù∏
            result = self.run_command(
                f"gcloud run services describe {self.service_name} "
                f"--region=asia-northeast1 --format='value(status.url)'"
            )
            
            service_url = result.stdout.strip()
            
            print("‚úÖ Cloud Run Î∞∞Ìè¨ ÏôÑÎ£å")
            print(f"üåê ÏÑúÎπÑÏä§ URL: {service_url}")
            print(f"üìö API Î¨∏ÏÑú: {service_url}/docs")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Cloud Run Î∞∞Ìè¨ Ïã§Ìå®: {e}")
            return False
    
    def setup_database(self) -> bool:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï"""
        print("üóÑÔ∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï Ï§ë...")
        
        try:
            # Alembic ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìñâ
            self.run_command("alembic upgrade head")
            print("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏôÑÎ£å")
            return True
            
        except Exception as e:
            print(f"‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï Ïã§Ìå®: {e}")
            return False
    
    def create_secrets(self) -> bool:
        """ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± (Cloud Run Î∞∞Ìè¨ Ïãú)"""
        if self.environment != "production":
            return True
        
        print("üîê ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± Ï§ë...")
        
        try:
            # ÌôòÍ≤Ω Î≥ÄÏàò ÌååÏùº ÏùΩÍ∏∞
            env_file = self.project_root / f".env.{self.environment}"
            
            with open(env_file, 'r') as f:
                env_vars = {}
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        key, value = line.strip().split('=', 1)
                        env_vars[key] = value
            
            # Google Secret ManagerÏóê ÏãúÌÅ¨Î¶ø ÏÉùÏÑ±
            for key, value in env_vars.items():
                if key in ['DATABASE_URL', 'GEMINI_API_KEY', 'SECRET_KEY']:
                    secret_name = f"{self.service_name}-{key.lower().replace('_', '-')}"
                    
                    # ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± ÎòêÎäî ÏóÖÎç∞Ïù¥Ìä∏
                    create_cmd = f"gcloud secrets create {secret_name} --data-file=-"
                    result = self.run_command(f"echo '{value}' | {create_cmd}", check=False)
                    
                    if result.returncode != 0:
                        # Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏
                        update_cmd = f"gcloud secrets versions add {secret_name} --data-file=-"
                        self.run_command(f"echo '{value}' | {update_cmd}")
            
            print("‚úÖ ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± ÏôÑÎ£å")
            return True
            
        except Exception as e:
            print(f"‚ùå ÏãúÌÅ¨Î¶ø ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return False
    
    def health_check(self, url: str) -> bool:
        """Î∞∞Ìè¨Îêú ÏÑúÎπÑÏä§ Ìó¨Ïä§ Ï≤¥ÌÅ¨"""
        print("üè• ÏÑúÎπÑÏä§ Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ï§ë...")
        
        try:
            import requests
            
            # Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏ Ìò∏Ï∂ú
            response = requests.get(f"{url}/health", timeout=30)
            
            if response.status_code == 200:
                print("‚úÖ ÏÑúÎπÑÏä§ Ï†ïÏÉÅ ÎèôÏûë ÌôïÏù∏")
                return True
            else:
                print(f"‚ùå ÏÑúÎπÑÏä§ ÏÉÅÌÉú Ïù¥ÏÉÅ: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®: {e}")
            return False
    
    def rollback(self) -> bool:
        """Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞±"""
        print("üîÑ Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞± Ï§ë...")
        
        if self.environment == "production":
            try:
                # Cloud Run Ïù¥Ï†Ñ Î¶¨ÎπÑÏ†ÑÏúºÎ°ú Î°§Î∞±
                self.run_command(
                    f"gcloud run services update-traffic {self.service_name} "
                    f"--to-revisions=LATEST=0 --region=asia-northeast1"
                )
                print("‚úÖ Î°§Î∞± ÏôÑÎ£å")
                return True
            except Exception as e:
                print(f"‚ùå Î°§Î∞± Ïã§Ìå®: {e}")
                return False
        else:
            # Î°úÏª¨ ÌôòÍ≤ΩÏùÄ Ïù¥Ï†Ñ Ïù¥ÎØ∏ÏßÄÎ°ú Ïû¨Î∞∞Ìè¨
            try:
                self.run_command("docker-compose down")
                self.run_command("docker-compose up -d")
                print("‚úÖ Î°úÏª¨ ÌôòÍ≤Ω Ïû¨ÏãúÏûë ÏôÑÎ£å")
                return True
            except Exception as e:
                print(f"‚ùå Î°úÏª¨ ÌôòÍ≤Ω Ïû¨ÏãúÏûë Ïã§Ìå®: {e}")
                return False
    
    def deploy(self, skip_tests: bool = False) -> bool:
        """Ï†ÑÏ≤¥ Î∞∞Ìè¨ ÌîÑÎ°úÏÑ∏Ïä§"""
        print(f"üöÄ {self.environment} ÌôòÍ≤Ω Î∞∞Ìè¨ ÏãúÏûë")
        print("="*50)
        
        # 1. ÌïÑÏàò Ï°∞Í±¥ ÌôïÏù∏
        if not self.check_prerequisites():
            return False
        
        # 2. ÌÖåÏä§Ìä∏ Ïã§Ìñâ (ÏÑ†ÌÉùÏ†Å)
        if not skip_tests:
            if not self.run_tests():
                print("‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®Î°ú Î∞∞Ìè¨ Ï§ëÎã®")
                return False
        
        # 3. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
        if not self.build_docker_image():
            return False
        
        # 4. ÌôòÍ≤ΩÎ≥Ñ Î∞∞Ìè¨
        if self.environment == "production":
            # ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨
            if not self.create_secrets():
                return False
            
            if not self.deploy_to_cloud_run():
                return False
            
            # Ìó¨Ïä§ Ï≤¥ÌÅ¨
            # service_urlÏùÑ Ïã§Ï†úÎ°ú Í∞ÄÏ†∏ÏôÄÏïº Ìï®
            # if not self.health_check(service_url):
            #     self.rollback()
            #     return False
            
        else:
            # Î°úÏª¨/Í∞úÎ∞ú ÌôòÍ≤Ω Î∞∞Ìè¨
            if not self.deploy_to_local():
                return False
        
        # 5. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
        if not self.setup_database():
            print("‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï Ïã§Ìå® (ÏàòÎèô ÌôïÏù∏ ÌïÑÏöî)")
        
        print("="*50)
        print("üéâ Î∞∞Ìè¨ ÏôÑÎ£å!")
        print("="*50)
        
        return True


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    parser = argparse.ArgumentParser(description="AI Diary Backend Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏")
    parser.add_argument(
        "--env",
        choices=["development", "staging", "production"],
        default="development",
        help="Î∞∞Ìè¨ ÌôòÍ≤Ω"
    )
    parser.add_argument(
        "--skip-tests",
        action="store_true",
        help="ÌÖåÏä§Ìä∏ Í±¥ÎÑàÎõ∞Í∏∞"
    )
    parser.add_argument(
        "--rollback",
        action="store_true",
        help="Ïù¥Ï†Ñ Î≤ÑÏ†ÑÏúºÎ°ú Î°§Î∞±"
    )
    
    args = parser.parse_args()
    
    deployment_manager = DeploymentManager(args.env)
    
    try:
        if args.rollback:
            success = deployment_manager.rollback()
        else:
            success = deployment_manager.deploy(skip_tests=args.skip_tests)
        
        if success:
            print("‚úÖ ÏûëÏóÖ ÏôÑÎ£å")
            sys.exit(0)
        else:
            print("‚ùå ÏûëÏóÖ Ïã§Ìå®")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ùå Î∞∞Ìè¨Í∞Ä Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Î∞∞Ìè¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
