# Multi-stage build로 크기 최적화
FROM python:3.11-alpine AS builder

# 작업 디렉토리 설정
WORKDIR /app

# Alpine에서 필요한 빌드 도구들 설치
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    postgresql-dev \
    && pip install --upgrade pip

# 최소한의 종속성만 설치
COPY requirements-minimal.txt .
RUN pip install --no-cache-dir --user -r requirements-minimal.txt

# 실제 실행 이미지
FROM python:3.11-alpine

# 런타임에 필요한 패키지만 설치
RUN apk add --no-cache postgresql-libs

# 빌더에서 설치된 패키지들 복사
COPY --from=builder /root/.local /root/.local

# PATH에 local bin 추가
ENV PATH=/root/.local/bin:$PATH

# 작업 디렉토리 설정
WORKDIR /app

# 애플리케이션 코드만 복사 (.dockerignore로 불필요한 파일 제외)
COPY app/ ./app/
COPY alembic/ ./alembic/
COPY alembic.ini .
COPY .env* ./

# 포트 노출
EXPOSE 8000

# 헬스체크 (curl 대신 wget 사용, alpine에 기본 포함)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1

# 애플리케이션 실행
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
